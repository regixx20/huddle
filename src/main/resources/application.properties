# --- DataSource (LOCAL) ---
spring.datasource.url=jdbc:postgresql://localhost:5432/meat_easy_db
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

# --- JPA / Hibernate ---
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
# dev: update | première fois: create | prod: validate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false

# LOB avec Postgres (évite l’erreur createClob)
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# Quote global des identifiants -> évite le conflit sur le nom de table "user"
spring.jpa.properties.hibernate.globally_quoted_identifiers=true
# Nommage snake_case cohérent (UserAccount -> user_account)
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy

# --- Initialisation SQL ---
# si tu as un data.sql/schema.sql : d’abord créer le schéma puis injecter les données
spring.sql.init.mode=always
spring.jpa.defer-datasource-initialization=true

# --- Logs utiles ---
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.orm.jdbc.bind=TRACE

# --- Mail (optional, values can be provided via environment variables) ---
spring.mail.host=${MAIL_HOST:}
spring.mail.port=${MAIL_PORT:25}
spring.mail.username=${MAIL_USERNAME:}
spring.mail.password=${MAIL_PASSWORD:}
spring.mail.properties.mail.smtp.auth=${MAIL_SMTP_AUTH:false}
spring.mail.properties.mail.smtp.starttls.enable=${MAIL_SMTP_STARTTLS:false}
